// Mocks generated by Mockito 5.4.3 from annotations
// in parking_manager/test/data/datasources/parking_local_data_source_sqflite_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:parking_manager/parking_manager/data/datasource/parking_local_data_source_sqflite.dart'
    as _i2;
import 'package:parking_manager/parking_manager/domain/entities/parking_entity.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ParkingLocalDataSourceSqflite].
///
/// See the documentation for Mockito's code generation for more information.
class MockParkingLocalDataSourceSqflite extends _i1.Mock
    implements _i2.ParkingLocalDataSourceSqflite {
  MockParkingLocalDataSourceSqflite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> initDb() => (super.noSuchMethod(
        Invocation.method(
          #initDb,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> registerParking(_i4.ParkingEntity? parkingEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerParking,
          [parkingEntity],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.ParkingEntity>> getHistory(String? dateSearch) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistory,
          [dateSearch],
        ),
        returnValue:
            _i3.Future<List<_i4.ParkingEntity>>.value(<_i4.ParkingEntity>[]),
      ) as _i3.Future<List<_i4.ParkingEntity>>);

  @override
  _i3.Future<List<_i4.ParkingEntity>> getParkingOccupied() =>
      (super.noSuchMethod(
        Invocation.method(
          #getParkingOccupied,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ParkingEntity>>.value(<_i4.ParkingEntity>[]),
      ) as _i3.Future<List<_i4.ParkingEntity>>);

  @override
  _i3.Future<void> updateParking(_i4.ParkingEntity? parkingEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateParking,
          [parkingEntity],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
